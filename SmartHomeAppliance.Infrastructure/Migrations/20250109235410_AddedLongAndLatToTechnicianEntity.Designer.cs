// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHomeAppliance.Infrastructure.Data;

#nullable disable

namespace SmartHomeAppliance.Infrastructure.Migrations
{
    [DbContext(typeof(SmartHomeApplianceDbContext))]
    [Migration("20250109235410_AddedLongAndLatToTechnicianEntity")]
    partial class AddedLongAndLatToTechnicianEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4f8554d2-cfaa-44b5-90ce-e883c804ae90",
                            ConcurrencyStamp = "4f8554d2-cfaa-44b5-90ce-e883c804ae90",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "656a6079-ec9a-4a98-a484-2d1752156d60",
                            ConcurrencyStamp = "656a6079-ec9a-4a98-a484-2d1752156d60",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            RoleId = "656a6079-ec9a-4a98-a484-2d1752156d60"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Activity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "27d78708-8671-4b05-bd5e-17aa91392224",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87b3a84c-b6cd-4bc2-b020-9df06af1a420",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@smarthomeapp.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SMARTHOMEAPP.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAELtWCJc4St85icrYY2fmAaKMCDwH/Cev+PEwK3TgHPrhxVCXW/C/5VjHq53I25hVWw==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://plus.unsplash.com/premium_photo-1689530775582-83b8abdb5020?q=80&w=2670&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            SecurityStamp = "3a85148e-ac8d-40e1-a77b-221d020f6dcb",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "12345678-9abc-def0-1234-56789abcdef0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46eb8f6f-1357-4861-a8c6-4557f65fd028",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEET3IvOE59YxBkXeFqM/scrK/GoDovYayotQtSXywAcG+9xyywA+yF7NQv611YsX7g==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGiRJA_5DqmVm7TxMV7E0IzYzUujF4p3SHPg&s",
                            SecurityStamp = "820965d5-ccab-482b-bb46-543d6a7dad0d",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "abcdef12-3456-7890-abcd-ef1234567890",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c619f49-1f74-480b-ad98-081c4656b3e3",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK45Tscy4CzbVglEVLMZV8l9tJxpWW2S2AEy5Zz+x23xpuyRbrH3IVtHuN3TXcuYkg==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1511367461989-f85a21fda167",
                            SecurityStamp = "cedf1e8b-2ef2-4203-bffa-63ee283ccc6f",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "fedcba98-7654-3210-fedc-ba9876543210",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95e11481-f0f5-436e-a8af-6ad3efdbadf6",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "guest@example.com",
                            EmailConfirmed = false,
                            FirstName = "Guest",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEORABsabRhQt1+portJ3xVtQu2v94/68BGPo+JrnUazOBpYXcbOdb0TH6kYWsWjaKA==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e",
                            SecurityStamp = "9edbbb16-3a46-44c4-bb62-1ea33dc80331",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "11223344-5566-7788-99aa-bbccddeeff00",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0bf1654-e01c-4362-9f61-f23e8784c6b7",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "moderator@smarthomeapp.bg",
                            EmailConfirmed = true,
                            FirstName = "Mod",
                            LastName = "Erator",
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@SMARTHOMEAPP.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEOFF1t37UdHe/XY+tmbI109lmIVTATLvUrz1S62ORle4/0uer8ssCrx+ixMHwN5kdQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1534528741775-53994a69daeb",
                            SecurityStamp = "abe5d04c-e677-44b2-bea6-f0abb0d45f19",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.CartsProduct", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartsProducts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("StripePaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.OrdersProducts", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId", "UserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("OrderId", "UserId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Category = 0,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2025, 1, 9, 23, 54, 8, 966, DateTimeKind.Utc).AddTicks(8447),
                            Description = "A high-definition doorbell camera with night vision and motion detection.",
                            ImageUrl = "https://m.media-amazon.com/images/I/611pxr2ITgL.jpg",
                            Name = "Smart Doorbell Camera",
                            Price = 129.99m,
                            Rating = 4,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Category = 1,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2025, 1, 9, 23, 54, 8, 966, DateTimeKind.Utc).AddTicks(8452),
                            Description = "Color-changing LED light bulbs controllable via app or voice commands.",
                            ImageUrl = "https://cdn.shopify.com/s/files/1/0024/9803/5810/products/597853-Product-0-I-637940195577281576.jpg?v=1658439198",
                            Name = "Smart LED Light Bulbs (4-Pack)",
                            Price = 39.99m,
                            Rating = 5,
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = "40941ea9-019c-415c-a101-9ccbc93a07d6",
                            Category = 2,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2025, 1, 9, 23, 54, 8, 966, DateTimeKind.Utc).AddTicks(8457),
                            Description = "A programmable thermostat that learns your heating and cooling preferences.",
                            ImageUrl = "https://engocontrols.com/wp-content/uploads/2022/07/E901WIFI-2000x2000-1_strona_-min.png",
                            Name = "WiFi Thermostat",
                            Price = 249.99m,
                            Rating = 4,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Category = 3,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2025, 1, 9, 23, 54, 8, 966, DateTimeKind.Utc).AddTicks(8459),
                            Description = "Refrigerator with touch screen, interior cameras, and WiFi connectivity.",
                            ImageUrl = "https://www.lifewire.com/thmb/Ib9NmsHdQ4q236zqBVxnsNYTIHA=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/samsung-ha-ref-rf56k9540sr-family-hub-overview-5aa18f0e18ba010037c023a5.jpg",
                            Name = "Smart Refrigerator",
                            Price = 1599.99m,
                            Rating = 3,
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = "800a6ca2-3027-4a0f-ae72-0156405a6a58",
                            Category = 4,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2025, 1, 9, 23, 54, 8, 966, DateTimeKind.Utc).AddTicks(8465),
                            Description = "Voice-activated smart speaker with high-fidelity sound and assistant integration.",
                            ImageUrl = "https://cdn.aarp.net/content/dam/aarpe/en/home/home-family/personal-technology/info-2019/smart-speaker-uses/_jcr_content/root/container_main/container_body_main/container_body1/container_body_cf/container_image/articlecontentfragment/cfimage.coreimg.50.932.jpeg/content/dam/aarp/home-and-family/personal-technology/2019/10/1140-smart-speaker-functions.jpg",
                            Name = "Smart Speaker",
                            Price = 99.99m,
                            Rating = 4,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = "a2fa3f78-c2ce-44ae-8b3f-402f54563b30",
                            Category = 5,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2025, 1, 9, 23, 54, 8, 966, DateTimeKind.Utc).AddTicks(8474),
                            Description = "Smart plug that monitors energy usage of connected devices in real-time.",
                            ImageUrl = "https://static.independent.co.uk/2023/01/10/16/best%20energy%20monitors%20Indybest%20copy.jpg",
                            Name = "Energy Monitor Plug",
                            Price = 24.99m,
                            Rating = 5,
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Category = 6,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2025, 1, 9, 23, 54, 8, 966, DateTimeKind.Utc).AddTicks(8477),
                            Description = "WiFi-enabled robot vacuum with auto-charge and scheduling capabilities.",
                            ImageUrl = "https://crowncleaners.org.uk/wp-content/uploads/2024/08/Robot_Vacuum_Cleaner-feature-image-blog.jpg",
                            Name = "Robot Vacuum Cleaner",
                            Price = 299.99m,
                            Rating = 5,
                            StockQuantity = 75
                        },
                        new
                        {
                            Id = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Category = 7,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2025, 1, 9, 23, 54, 8, 966, DateTimeKind.Utc).AddTicks(8479),
                            Description = "Waterproof fitness tracker with heart rate monitor and sleep tracking.",
                            ImageUrl = "https://s13emagst.akamaized.net/products/62903/62902367/images/res_b892254d28f050b61467aa3472854e47.jpg",
                            Name = "Smart Fitness Tracker",
                            Price = 59.99m,
                            Rating = 4,
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Category = 8,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2025, 1, 9, 23, 54, 8, 966, DateTimeKind.Utc).AddTicks(8483),
                            Description = "Central hub to control and integrate all smart home devices.",
                            ImageUrl = "https://smartechdaily.com/wp-content/uploads/2024/05/19690_Generated_Image-1024x585.webp",
                            Name = "Smart Home Hub",
                            Price = 129.99m,
                            Rating = 3,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Category = 9,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2025, 1, 9, 23, 54, 8, 966, DateTimeKind.Utc).AddTicks(8485),
                            Description = "Weather-based sprinkler system for efficient garden watering.",
                            ImageUrl = "https://i.pcmag.com/imagery/reviews/05VIJDsjiZiHbe0MImRiYLr-1..v1569469978.jpg",
                            Name = "Smart Sprinkler System",
                            Price = 199.99m,
                            Rating = 2,
                            StockQuantity = 20
                        });
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = "dc3e4950-b090-4b98-85b1-fd2b64e03702",
                            Comment = "I love how easy it is to set up this doorbell camera. The image quality is superb.",
                            ProductId = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 30, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8951),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "47ed1c53-cf3c-4c68-ad4d-341642112d4d",
                            Comment = "The refrigerator is sleek, but I think it's overpriced for the features.",
                            ProductId = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 25, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8959),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "a7b07590-95f0-41ca-a2ea-d93470e6e0c7",
                            Comment = "A must-have fitness tracker for anyone serious about health.",
                            ProductId = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 20, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8963),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "c4757b16-9591-4ce8-a600-480c52329edd",
                            Comment = "Fun to use and great for parties! The color-changing feature is amazing.",
                            ProductId = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 1, 4, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8965),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "5c1604f6-9931-48fe-bab1-3eedda2c7512",
                            Comment = "The robot vacuum works well on carpets and tiles but struggles with edges.",
                            ProductId = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 28, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8967),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "36ee96d7-aa03-4049-b3b4-4d6318b52fae",
                            Comment = "I saved so much energy with this plug. The real-time monitoring is awesome.",
                            ProductId = "a2fa3f78-c2ce-44ae-8b3f-402f54563b30",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 22, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8969),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "7367ed5c-5845-4e75-a998-a43cd25d405d",
                            Comment = "This thermostat was a game-changer for our energy bills.",
                            ProductId = "40941ea9-019c-415c-a101-9ccbc93a07d6",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 15, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8971),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "90a7e90b-8ddb-4ee6-bfc8-beae1fb5e205",
                            Comment = "The weather-based feature works like a charm for my garden.",
                            ProductId = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 1, 1, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8972),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "5bbde54a-5114-4b7c-ad68-fa5fc646f791",
                            Comment = "The hub has some lag when controlling multiple devices.",
                            ProductId = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 10, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8975),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "a51d7a39-16d6-40ea-8e8c-2b0e8c503a14",
                            Comment = "The night vision is good, but the motion detection can be too sensitive.",
                            ProductId = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 26, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8976),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "06040cf2-f302-46d5-950b-e27b54f20685",
                            Comment = "Perfect for busy people. It cleans thoroughly and docks automatically.",
                            ProductId = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 20, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8980),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "8c5d34b0-2251-42b9-9792-c92b542b4a44",
                            Comment = "Great design, but I wish the touch screen was more responsive.",
                            ProductId = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 18, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8981),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "3c539dc9-f1aa-437a-91f0-080b387f52db",
                            Comment = "The lights are fantastic, and the app is super intuitive.",
                            ProductId = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 1, 2, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8983),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "e9b91078-8618-4d2a-a7b2-189d81c83225",
                            Comment = "Accurate sleep tracking, but the battery life is shorter than expected.",
                            ProductId = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 29, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8985),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "66563481-589a-44a9-8bb7-9147fe840cdb",
                            Comment = "Works well for basic needs, but advanced users may want more features.",
                            ProductId = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 24, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8987),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "c377ee8a-ba7a-4df9-b39f-1b5fac86f114",
                            Comment = "Easy to install and very efficient for garden watering.",
                            ProductId = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 31, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8988),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "05263953-b077-48a4-95b3-ccc6cad90813",
                            Comment = "This doorbell camera works great! The motion detection is very accurate.",
                            ProductId = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 30, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8990),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "a4a732ab-3a5d-4f1a-a089-41fc8d41a0ea",
                            Comment = "The lights are very bright and the app is easy to use.",
                            ProductId = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 20, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(8992),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "f6481017-9bb9-4e9e-95d7-d814e625e86a",
                            Comment = "A bit pricey, but I love how it learns my preferences!",
                            ProductId = "40941ea9-019c-415c-a101-9ccbc93a07d6",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 25, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(9033),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "69abd55f-98e5-4f6d-b9df-1755282fa096",
                            Comment = "The screen is impressive, but the cooling performance could be better.",
                            ProductId = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Rating = 3,
                            ReviewDate = new DateTime(2025, 1, 4, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(9035),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "d919dbdf-1f82-4a49-8278-1379f12f0772",
                            Comment = "This vacuum cleaner has saved me so much time. Highly recommend!",
                            ProductId = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 1, 1, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(9037),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "c7ce0e5c-395f-4b26-881d-71b1a0cafb8e",
                            Comment = "Great for tracking my workouts, but the strap feels a bit cheap.",
                            ProductId = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 28, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(9039),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "90aabb0c-18e4-4847-be83-f3de46aaa40d",
                            Comment = "Good hub, but it doesn't support some devices I own.",
                            ProductId = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 22, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(9040),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "f5ea57b0-4987-4252-bc03-c26c9a431717",
                            Comment = "The sprinkler system works well, but setup was confusing.",
                            ProductId = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 18, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(9042),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "7ef40887-f143-4f2b-a22c-360a3256865e",
                            Comment = "Simple to use and very informative. A must-have for saving energy.",
                            ProductId = "a2fa3f78-c2ce-44ae-8b3f-402f54563b30",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 10, 23, 54, 9, 201, DateTimeKind.Utc).AddTicks(9044),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        });
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Technician", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.TechnicianProduct", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TechnicianId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("InstallationPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "TechnicianId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TechniciansProducts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Activity", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Cart", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.CartsProduct", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.OrdersProducts", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("OrderId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Technician", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.TechnicianProduct", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("OrdersProducts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("OrdersProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
