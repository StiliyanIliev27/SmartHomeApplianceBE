// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHomeAppliance.Infrastructure.Data;

#nullable disable

namespace SmartHomeAppliance.Infrastructure.Migrations
{
    [DbContext(typeof(SmartHomeApplianceDbContext))]
    [Migration("20241226215802_UpdatedJohnDoeProfilePicture")]
    partial class UpdatedJohnDoeProfilePicture
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4f8554d2-cfaa-44b5-90ce-e883c804ae90",
                            ConcurrencyStamp = "4f8554d2-cfaa-44b5-90ce-e883c804ae90",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "656a6079-ec9a-4a98-a484-2d1752156d60",
                            ConcurrencyStamp = "656a6079-ec9a-4a98-a484-2d1752156d60",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            RoleId = "656a6079-ec9a-4a98-a484-2d1752156d60"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "27d78708-8671-4b05-bd5e-17aa91392224",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e53fa4ed-8516-470c-bc48-590527d68b2b",
                            Email = "admin@smarthomeapp.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SMARTHOMEAPP.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEFWMLGGDeBK/tC+L2JXrJJVPAsBvGh5OFVsxYZgxuoSp7C5gZwht/gCMXKGF9vgY3Q==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://plus.unsplash.com/premium_photo-1689530775582-83b8abdb5020?q=80&w=2670&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            SecurityStamp = "7f81be4b-68a9-4786-bbcc-18ec71bf4338",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "12345678-9abc-def0-1234-56789abcdef0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "323940a4-3947-4460-9ace-203935b9625c",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDGExgbNF6IxPl4nxgkynQVQHZzJv4YeNNc61j33pCNOsoQlnMmB2MV7sTdz+ewOpA==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGiRJA_5DqmVm7TxMV7E0IzYzUujF4p3SHPg&s",
                            SecurityStamp = "c41799af-1a1f-4591-8190-29e5cdda3ca8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "abcdef12-3456-7890-abcd-ef1234567890",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e0fcaf4-1f79-4a70-a070-5ca4dd15ad41",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2hAYUWlhcGQjW9+HgaoctfSMC//Ao92/e/k5OGb5zbD1xVrsb91f8wT45BK64YqQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1511367461989-f85a21fda167",
                            SecurityStamp = "0bb0c917-7bfa-472f-8693-ceb1cad40750",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "fedcba98-7654-3210-fedc-ba9876543210",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1d34db5-43ba-42ea-b178-d44cd996ca9b",
                            Email = "guest@example.com",
                            EmailConfirmed = false,
                            FirstName = "Guest",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDFzYC0MceMHPYRKWPUzl7AG5FclrKB+bOmPopSersXuEzjwUz2PmBK/GuxKHXDCjQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e",
                            SecurityStamp = "85d75791-2c5b-4613-a670-c090201b1035",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "11223344-5566-7788-99aa-bbccddeeff00",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "443c19c8-9f36-407b-bd77-aa0f5c1714be",
                            Email = "moderator@smarthomeapp.bg",
                            EmailConfirmed = true,
                            FirstName = "Mod",
                            LastName = "Erator",
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@SMARTHOMEAPP.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEP1wHZgrUqj20UIex7x+gpinEaQKsobUg7gVX7hSdocytHMhCxE3/8wZ96JRRqbN0g==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1534528741775-53994a69daeb",
                            SecurityStamp = "f1a46110-9a1a-4d0d-9850-b15e550474f9",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.CartsProduct", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartsProducts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.OrdersProducts", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId", "UserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("OrderId", "UserId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Category = 0,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 21, 57, 59, 69, DateTimeKind.Utc).AddTicks(8597),
                            Description = "A high-definition doorbell camera with night vision and motion detection.",
                            ImageUrl = "https://m.media-amazon.com/images/I/611pxr2ITgL.jpg",
                            Name = "Smart Doorbell Camera",
                            Price = 129.99m,
                            Rating = 4,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Category = 1,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 21, 57, 59, 69, DateTimeKind.Utc).AddTicks(8767),
                            Description = "Color-changing LED light bulbs controllable via app or voice commands.",
                            ImageUrl = "https://cdn.shopify.com/s/files/1/0024/9803/5810/products/597853-Product-0-I-637940195577281576.jpg?v=1658439198",
                            Name = "Smart LED Light Bulbs (4-Pack)",
                            Price = 39.99m,
                            Rating = 5,
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = "40941ea9-019c-415c-a101-9ccbc93a07d6",
                            Category = 2,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 21, 57, 59, 69, DateTimeKind.Utc).AddTicks(8774),
                            Description = "A programmable thermostat that learns your heating and cooling preferences.",
                            ImageUrl = "https://engocontrols.com/wp-content/uploads/2022/07/E901WIFI-2000x2000-1_strona_-min.png",
                            Name = "WiFi Thermostat",
                            Price = 249.99m,
                            Rating = 4,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Category = 3,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 21, 57, 59, 69, DateTimeKind.Utc).AddTicks(8778),
                            Description = "Refrigerator with touch screen, interior cameras, and WiFi connectivity.",
                            ImageUrl = "https://www.lifewire.com/thmb/Ib9NmsHdQ4q236zqBVxnsNYTIHA=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/samsung-ha-ref-rf56k9540sr-family-hub-overview-5aa18f0e18ba010037c023a5.jpg",
                            Name = "Smart Refrigerator",
                            Price = 1599.99m,
                            Rating = 3,
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = "800a6ca2-3027-4a0f-ae72-0156405a6a58",
                            Category = 4,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 21, 57, 59, 69, DateTimeKind.Utc).AddTicks(8787),
                            Description = "Voice-activated smart speaker with high-fidelity sound and assistant integration.",
                            ImageUrl = "https://cdn.aarp.net/content/dam/aarpe/en/home/home-family/personal-technology/info-2019/smart-speaker-uses/_jcr_content/root/container_main/container_body_main/container_body1/container_body_cf/container_image/articlecontentfragment/cfimage.coreimg.50.932.jpeg/content/dam/aarp/home-and-family/personal-technology/2019/10/1140-smart-speaker-functions.jpg",
                            Name = "Smart Speaker",
                            Price = 99.99m,
                            Rating = 4,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = "a2fa3f78-c2ce-44ae-8b3f-402f54563b30",
                            Category = 5,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 21, 57, 59, 69, DateTimeKind.Utc).AddTicks(8792),
                            Description = "Smart plug that monitors energy usage of connected devices in real-time.",
                            ImageUrl = "https://static.independent.co.uk/2023/01/10/16/best%20energy%20monitors%20Indybest%20copy.jpg",
                            Name = "Energy Monitor Plug",
                            Price = 24.99m,
                            Rating = 5,
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Category = 6,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 21, 57, 59, 69, DateTimeKind.Utc).AddTicks(8800),
                            Description = "WiFi-enabled robot vacuum with auto-charge and scheduling capabilities.",
                            ImageUrl = "https://crowncleaners.org.uk/wp-content/uploads/2024/08/Robot_Vacuum_Cleaner-feature-image-blog.jpg",
                            Name = "Robot Vacuum Cleaner",
                            Price = 299.99m,
                            Rating = 5,
                            StockQuantity = 75
                        },
                        new
                        {
                            Id = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Category = 7,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 21, 57, 59, 69, DateTimeKind.Utc).AddTicks(8805),
                            Description = "Waterproof fitness tracker with heart rate monitor and sleep tracking.",
                            ImageUrl = "https://s13emagst.akamaized.net/products/62903/62902367/images/res_b892254d28f050b61467aa3472854e47.jpg",
                            Name = "Smart Fitness Tracker",
                            Price = 59.99m,
                            Rating = 4,
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Category = 8,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 21, 57, 59, 69, DateTimeKind.Utc).AddTicks(8812),
                            Description = "Central hub to control and integrate all smart home devices.",
                            ImageUrl = "https://smartechdaily.com/wp-content/uploads/2024/05/19690_Generated_Image-1024x585.webp",
                            Name = "Smart Home Hub",
                            Price = 129.99m,
                            Rating = 3,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Category = 9,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 21, 57, 59, 69, DateTimeKind.Utc).AddTicks(8816),
                            Description = "Weather-based sprinkler system for efficient garden watering.",
                            ImageUrl = "https://i.pcmag.com/imagery/reviews/05VIJDsjiZiHbe0MImRiYLr-1..v1569469978.jpg",
                            Name = "Smart Sprinkler System",
                            Price = 199.99m,
                            Rating = 2,
                            StockQuantity = 20
                        });
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = "9080907d-14c2-4841-b697-e73adc782ca9",
                            Comment = "I love how easy it is to set up this doorbell camera. The image quality is superb.",
                            ProductId = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 16, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6749),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "04d39568-01d4-4da2-859a-cd5ccb239d17",
                            Comment = "The refrigerator is sleek, but I think it's overpriced for the features.",
                            ProductId = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 11, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6764),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "05f0c71b-504f-4499-bf48-2001090c9659",
                            Comment = "A must-have fitness tracker for anyone serious about health.",
                            ProductId = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 6, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6769),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "ab517a04-d7bc-4aea-8702-d34b6d8eadb2",
                            Comment = "Fun to use and great for parties! The color-changing feature is amazing.",
                            ProductId = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 21, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6775),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "c81b6219-1afa-462f-9d67-8d69e28c4767",
                            Comment = "The robot vacuum works well on carpets and tiles but struggles with edges.",
                            ProductId = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 14, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6783),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "84cb92f0-ec89-49bb-850b-d3591d7479ab",
                            Comment = "I saved so much energy with this plug. The real-time monitoring is awesome.",
                            ProductId = "a2fa3f78-c2ce-44ae-8b3f-402f54563b30",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 8, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6787),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "bc815757-77d3-4644-b703-54730ec63750",
                            Comment = "This thermostat was a game-changer for our energy bills.",
                            ProductId = "40941ea9-019c-415c-a101-9ccbc93a07d6",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 1, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6792),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "00b06dc2-faa4-41f7-9668-acc8577b30bd",
                            Comment = "The weather-based feature works like a charm for my garden.",
                            ProductId = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 18, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6796),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "b7021282-bf60-4d41-8df1-6d6c30fb056e",
                            Comment = "The hub has some lag when controlling multiple devices.",
                            ProductId = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 11, 26, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6802),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "f6953bbb-db92-4c95-9cab-48bd26727268",
                            Comment = "The night vision is good, but the motion detection can be too sensitive.",
                            ProductId = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 12, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6811),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "bde2e996-85bf-49a3-9df5-1b9f82c8dfe4",
                            Comment = "Perfect for busy people. It cleans thoroughly and docks automatically.",
                            ProductId = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 6, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6816),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "ea0e4368-e9eb-4ba5-8962-248cf9547360",
                            Comment = "Great design, but I wish the touch screen was more responsive.",
                            ProductId = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 4, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6820),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "c47aa578-7252-4dc5-aba9-427284f955b8",
                            Comment = "The lights are fantastic, and the app is super intuitive.",
                            ProductId = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 19, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6825),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "8e68ac92-c9f9-4007-909f-d0e2596d6a6c",
                            Comment = "Accurate sleep tracking, but the battery life is shorter than expected.",
                            ProductId = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 15, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6829),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "4215b968-3171-4bc4-94a0-efee5ac2e7be",
                            Comment = "Works well for basic needs, but advanced users may want more features.",
                            ProductId = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 10, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6833),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "54bf2262-e52f-4711-b26f-e9498636f337",
                            Comment = "Easy to install and very efficient for garden watering.",
                            ProductId = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 17, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6837),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "7dec038c-67b1-457c-981f-b2b896c6dfa2",
                            Comment = "This doorbell camera works great! The motion detection is very accurate.",
                            ProductId = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 16, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6841),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "5dc360bf-46d8-45b1-937b-91ae7d762c5e",
                            Comment = "The lights are very bright and the app is easy to use.",
                            ProductId = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 6, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6849),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "bac15b53-c541-4fa8-9a66-02dce7cca058",
                            Comment = "A bit pricey, but I love how it learns my preferences!",
                            ProductId = "40941ea9-019c-415c-a101-9ccbc93a07d6",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 11, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6858),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "ad9032a9-bfdf-4dd9-ba2c-7d03c3b986cd",
                            Comment = "The screen is impressive, but the cooling performance could be better.",
                            ProductId = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 21, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6862),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "e5d3de76-505b-42a2-84d8-b1a7fcbfebd6",
                            Comment = "This vacuum cleaner has saved me so much time. Highly recommend!",
                            ProductId = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 18, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6866),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "726f6524-0f1c-48c5-b804-b43e4040fce0",
                            Comment = "Great for tracking my workouts, but the strap feels a bit cheap.",
                            ProductId = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 14, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6870),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "c0139545-e69f-421a-8fe5-12c5d145cfb2",
                            Comment = "Good hub, but it doesn't support some devices I own.",
                            ProductId = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 8, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6874),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "2d37164c-ebe5-4eef-9e84-c58486d61210",
                            Comment = "The sprinkler system works well, but setup was confusing.",
                            ProductId = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 4, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6878),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "300f52d2-f044-4c0c-b174-691ccf380180",
                            Comment = "Simple to use and very informative. A must-have for saving energy.",
                            ProductId = "a2fa3f78-c2ce-44ae-8b3f-402f54563b30",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 11, 26, 21, 57, 59, 547, DateTimeKind.Utc).AddTicks(6882),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Cart", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.CartsProduct", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.OrdersProducts", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("OrderId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("OrdersProducts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("OrdersProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
