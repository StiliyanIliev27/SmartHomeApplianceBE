// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHomeAppliance.Infrastructure.Data;

#nullable disable

namespace SmartHomeAppliance.Infrastructure.Migrations
{
    [DbContext(typeof(SmartHomeApplianceDbContext))]
    [Migration("20241226121030_SeedReviews")]
    partial class SeedReviews
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4f8554d2-cfaa-44b5-90ce-e883c804ae90",
                            ConcurrencyStamp = "4f8554d2-cfaa-44b5-90ce-e883c804ae90",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "656a6079-ec9a-4a98-a484-2d1752156d60",
                            ConcurrencyStamp = "656a6079-ec9a-4a98-a484-2d1752156d60",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            RoleId = "656a6079-ec9a-4a98-a484-2d1752156d60"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "27d78708-8671-4b05-bd5e-17aa91392224",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "597f428d-9a53-45f5-b8f7-6680c18df7a6",
                            Email = "admin@smarthomeapp.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SMARTHOMEAPP.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEK9RkM/JSwCTDJTJBsiclu4q93Mn4kkYfos8zw/VcuYXfORa8q6OD31T5GL9vNBwcw==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://plus.unsplash.com/premium_photo-1689530775582-83b8abdb5020?q=80&w=2670&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            SecurityStamp = "8fa4923f-d84f-4b45-91e5-54f3f9f3eef7",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "12345678-9abc-def0-1234-56789abcdef0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33db7f0d-1203-45d5-96d5-e2706364378a",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBUNkxR2M8DXO8XbR0P3mGSHYyZQkIVu9Ao6u5dRlf50IMudQf+sZDL5bx/KDH4Zyw==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1502720705749-3c53d2b6dc34",
                            SecurityStamp = "64a23287-0072-429e-9d94-8eaa253da861",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "abcdef12-3456-7890-abcd-ef1234567890",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b99df1b-284f-412f-a2a3-9847d4de98b4",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIkkszsQOS5BHsoAgrOosLK1Vff+ecCijAyaUc6DUMB0a5G5za0wCE/ojWRPLR8UeQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1511367461989-f85a21fda167",
                            SecurityStamp = "d4f1ddda-e7cc-4d37-9e02-e1dada1fd0c2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "fedcba98-7654-3210-fedc-ba9876543210",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56cf4790-aae6-4058-82bb-7bd25e801686",
                            Email = "guest@example.com",
                            EmailConfirmed = false,
                            FirstName = "Guest",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL3as7Q59Ra0/JSPI6uG65k+6QC6OkpSwi675pM+6VxNIXeDBPm29t7PTU0WUWhsLQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e",
                            SecurityStamp = "795269bb-a39b-43eb-bf2e-8193dc2da8b5",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "11223344-5566-7788-99aa-bbccddeeff00",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fbc6e29b-58db-41eb-8f8e-0c0e2145aeb4",
                            Email = "moderator@smarthomeapp.bg",
                            EmailConfirmed = true,
                            FirstName = "Mod",
                            LastName = "Erator",
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@SMARTHOMEAPP.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEFOVc++USnESB4g4aV2BU7mQWGH/BuyZ5kObZdIuPL9Izpaeb3PB/Is7GEdbK+NQEQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1534528741775-53994a69daeb",
                            SecurityStamp = "ee87469d-1373-4356-afa4-bb921485715b",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.CartsProduct", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartsProducts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.OrdersProducts", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId", "UserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("OrderId", "UserId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Category = 0,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 12, 10, 27, 412, DateTimeKind.Utc).AddTicks(9020),
                            Description = "A high-definition doorbell camera with night vision and motion detection.",
                            ImageUrl = "https://m.media-amazon.com/images/I/611pxr2ITgL.jpg",
                            Name = "Smart Doorbell Camera",
                            Price = 129.99m,
                            Rating = 4,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Category = 1,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 12, 10, 27, 412, DateTimeKind.Utc).AddTicks(9044),
                            Description = "Color-changing LED light bulbs controllable via app or voice commands.",
                            ImageUrl = "https://cdn.shopify.com/s/files/1/0024/9803/5810/products/597853-Product-0-I-637940195577281576.jpg?v=1658439198",
                            Name = "Smart LED Light Bulbs (4-Pack)",
                            Price = 39.99m,
                            Rating = 5,
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = "40941ea9-019c-415c-a101-9ccbc93a07d6",
                            Category = 2,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 12, 10, 27, 412, DateTimeKind.Utc).AddTicks(9052),
                            Description = "A programmable thermostat that learns your heating and cooling preferences.",
                            ImageUrl = "https://engocontrols.com/wp-content/uploads/2022/07/E901WIFI-2000x2000-1_strona_-min.png",
                            Name = "WiFi Thermostat",
                            Price = 249.99m,
                            Rating = 4,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Category = 3,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 12, 10, 27, 412, DateTimeKind.Utc).AddTicks(9058),
                            Description = "Refrigerator with touch screen, interior cameras, and WiFi connectivity.",
                            ImageUrl = "https://www.lifewire.com/thmb/Ib9NmsHdQ4q236zqBVxnsNYTIHA=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/samsung-ha-ref-rf56k9540sr-family-hub-overview-5aa18f0e18ba010037c023a5.jpg",
                            Name = "Smart Refrigerator",
                            Price = 1599.99m,
                            Rating = 3,
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = "800a6ca2-3027-4a0f-ae72-0156405a6a58",
                            Category = 4,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 12, 10, 27, 412, DateTimeKind.Utc).AddTicks(9067),
                            Description = "Voice-activated smart speaker with high-fidelity sound and assistant integration.",
                            ImageUrl = "https://cdn.aarp.net/content/dam/aarpe/en/home/home-family/personal-technology/info-2019/smart-speaker-uses/_jcr_content/root/container_main/container_body_main/container_body1/container_body_cf/container_image/articlecontentfragment/cfimage.coreimg.50.932.jpeg/content/dam/aarp/home-and-family/personal-technology/2019/10/1140-smart-speaker-functions.jpg",
                            Name = "Smart Speaker",
                            Price = 99.99m,
                            Rating = 4,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = "a2fa3f78-c2ce-44ae-8b3f-402f54563b30",
                            Category = 5,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 12, 10, 27, 412, DateTimeKind.Utc).AddTicks(9073),
                            Description = "Smart plug that monitors energy usage of connected devices in real-time.",
                            ImageUrl = "https://static.independent.co.uk/2023/01/10/16/best%20energy%20monitors%20Indybest%20copy.jpg",
                            Name = "Energy Monitor Plug",
                            Price = 24.99m,
                            Rating = 5,
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Category = 6,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 12, 10, 27, 412, DateTimeKind.Utc).AddTicks(9079),
                            Description = "WiFi-enabled robot vacuum with auto-charge and scheduling capabilities.",
                            ImageUrl = "https://crowncleaners.org.uk/wp-content/uploads/2024/08/Robot_Vacuum_Cleaner-feature-image-blog.jpg",
                            Name = "Robot Vacuum Cleaner",
                            Price = 299.99m,
                            Rating = 5,
                            StockQuantity = 75
                        },
                        new
                        {
                            Id = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Category = 7,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 12, 10, 27, 412, DateTimeKind.Utc).AddTicks(9084),
                            Description = "Waterproof fitness tracker with heart rate monitor and sleep tracking.",
                            ImageUrl = "https://s13emagst.akamaized.net/products/62903/62902367/images/res_b892254d28f050b61467aa3472854e47.jpg",
                            Name = "Smart Fitness Tracker",
                            Price = 59.99m,
                            Rating = 4,
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Category = 8,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 12, 10, 27, 412, DateTimeKind.Utc).AddTicks(9280),
                            Description = "Central hub to control and integrate all smart home devices.",
                            ImageUrl = "https://smartechdaily.com/wp-content/uploads/2024/05/19690_Generated_Image-1024x585.webp",
                            Name = "Smart Home Hub",
                            Price = 129.99m,
                            Rating = 3,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Category = 9,
                            CreatorId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            DateCreated = new DateTime(2024, 12, 26, 12, 10, 27, 412, DateTimeKind.Utc).AddTicks(9292),
                            Description = "Weather-based sprinkler system for efficient garden watering.",
                            ImageUrl = "https://i.pcmag.com/imagery/reviews/05VIJDsjiZiHbe0MImRiYLr-1..v1569469978.jpg",
                            Name = "Smart Sprinkler System",
                            Price = 199.99m,
                            Rating = 2,
                            StockQuantity = 20
                        });
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = "b236b4c9-0d41-450d-a608-239bea799d13",
                            Comment = "I love how easy it is to set up this doorbell camera. The image quality is superb.",
                            ProductId = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 16, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7141),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "cc7ae2d3-1c7d-40d9-8df2-2c68cd2f98a2",
                            Comment = "The refrigerator is sleek, but I think it's overpriced for the features.",
                            ProductId = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 11, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7153),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "ec5e0659-506d-4d7a-b7f6-675ef77b695c",
                            Comment = "A must-have fitness tracker for anyone serious about health.",
                            ProductId = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 6, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7158),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "e24364bd-5fb7-4f31-b437-be81ca1b4f74",
                            Comment = "Fun to use and great for parties! The color-changing feature is amazing.",
                            ProductId = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 21, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7170),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "cee3a220-648e-48a1-b7b9-95f8af918254",
                            Comment = "The robot vacuum works well on carpets and tiles but struggles with edges.",
                            ProductId = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 14, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7323),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "43cd0706-5f38-4433-b1ef-f925d95f0af9",
                            Comment = "I saved so much energy with this plug. The real-time monitoring is awesome.",
                            ProductId = "a2fa3f78-c2ce-44ae-8b3f-402f54563b30",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 8, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7329),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "39b824a3-14d8-4dbf-8fb5-2cf62ee34102",
                            Comment = "This thermostat was a game-changer for our energy bills.",
                            ProductId = "40941ea9-019c-415c-a101-9ccbc93a07d6",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 1, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7333),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "a6099afd-5a8c-42be-82e5-1f5e117cf3c1",
                            Comment = "The weather-based feature works like a charm for my garden.",
                            ProductId = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 18, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7337),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "0082593a-a0b0-4cdc-8231-816de342a2ae",
                            Comment = "The hub has some lag when controlling multiple devices.",
                            ProductId = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 11, 26, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7344),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "da18a473-2a6d-4387-a001-849762a3c9f9",
                            Comment = "The night vision is good, but the motion detection can be too sensitive.",
                            ProductId = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 12, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7349),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "cc256d51-d345-4c47-9c0a-dbc4944a13b8",
                            Comment = "Perfect for busy people. It cleans thoroughly and docks automatically.",
                            ProductId = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 6, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7353),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "e6bff44f-e351-4c41-9a29-abfb746ef28c",
                            Comment = "Great design, but I wish the touch screen was more responsive.",
                            ProductId = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 4, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7361),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "ba46a02d-2d0b-4db4-8b19-9c4c9d03a4e6",
                            Comment = "The lights are fantastic, and the app is super intuitive.",
                            ProductId = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 19, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7365),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "3ca7b861-1c6e-437a-a7d6-4c19cd072b6d",
                            Comment = "Accurate sleep tracking, but the battery life is shorter than expected.",
                            ProductId = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 15, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7369),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "3a9ba814-4de7-427d-8042-eb87b8f21c4b",
                            Comment = "Works well for basic needs, but advanced users may want more features.",
                            ProductId = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 10, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7374),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "4cb0a009-8cdb-439d-a2df-243b2476b631",
                            Comment = "Easy to install and very efficient for garden watering.",
                            ProductId = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 17, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7378),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "70adea56-b271-4b0e-870f-150ee28b5f60",
                            Comment = "This doorbell camera works great! The motion detection is very accurate.",
                            ProductId = "c5a8a95c-0fe5-4f7d-9e46-0ad9fabf78ec",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 16, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7383),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "ecb83388-720d-496b-b5e7-1b6a0d58ed39",
                            Comment = "The lights are very bright and the app is easy to use.",
                            ProductId = "d39a7ae3-78c5-40ae-8569-34a0454dc909",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 6, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7387),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "fac732c0-0355-48ea-b0c2-bfa699c1df22",
                            Comment = "A bit pricey, but I love how it learns my preferences!",
                            ProductId = "40941ea9-019c-415c-a101-9ccbc93a07d6",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 11, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7396),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "40c7f449-5ce8-4a6c-aace-eaf2840b6d38",
                            Comment = "The screen is impressive, but the cooling performance could be better.",
                            ProductId = "54a7eca8-ed42-4444-8522-d5a00310ed62",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 21, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7404),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "df076ec1-db8e-4e08-973b-80ee1824e291",
                            Comment = "This vacuum cleaner has saved me so much time. Highly recommend!",
                            ProductId = "668c6a85-f13f-43e9-b898-64d210b1cd45",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 12, 18, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7409),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        },
                        new
                        {
                            Id = "8631d111-e4da-44f5-9945-af40f232df1c",
                            Comment = "Great for tracking my workouts, but the strap feels a bit cheap.",
                            ProductId = "7be0663a-6953-44a8-9d06-80f1d72ce6b3",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 14, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7413),
                            UserId = "abcdef12-3456-7890-abcd-ef1234567890"
                        },
                        new
                        {
                            Id = "297995cf-cdd4-432f-b5b9-aa59fed2d25c",
                            Comment = "Good hub, but it doesn't support some devices I own.",
                            ProductId = "b109e70a-6b64-489f-a216-1d407abcf02f",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 12, 8, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7417),
                            UserId = "11223344-5566-7788-99aa-bbccddeeff00"
                        },
                        new
                        {
                            Id = "7b803a81-b355-43e2-9fb3-f71eaafd360a",
                            Comment = "The sprinkler system works well, but setup was confusing.",
                            ProductId = "398a846c-2b2c-4b01-90f2-55d342268673",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 12, 4, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7421),
                            UserId = "fedcba98-7654-3210-fedc-ba9876543210"
                        },
                        new
                        {
                            Id = "e8fd431e-370e-46fa-87c6-77c6f5bbe595",
                            Comment = "Simple to use and very informative. A must-have for saving energy.",
                            ProductId = "a2fa3f78-c2ce-44ae-8b3f-402f54563b30",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 11, 26, 12, 10, 28, 28, DateTimeKind.Utc).AddTicks(7424),
                            UserId = "12345678-9abc-def0-1234-56789abcdef0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Cart", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.CartsProduct", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.OrdersProducts", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("OrderId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAppliance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("OrdersProducts");
                });

            modelBuilder.Entity("SmartHomeAppliance.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("OrdersProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
